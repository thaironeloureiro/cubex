name: Build wrapper & sonar-scanner - SonarCloud
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Arduino CLI        
        run: |                    
          wget http://downloads.arduino.cc/arduino-cli/arduino-cli_latest_Linux_64bit.tar.gz
          tar xf arduino-cli_latest_Linux_64bit.tar.gz
          mkdir -p $HOME/bin
          mv arduino-cli $HOME/bin/arduino-cli
          export PATH=$PATH:$HOME/bin
          arduino-cli config init --additional-urls https://downloads.arduino.cc/packages/package_staging_index.json
          arduino-cli config set library.enable_unsafe_install true
          arduino-cli config dump
          arduino-cli core update-index
          arduino-cli core install arduino:avr
          arduino-cli core install arduino:megaavr
          arduino-cli lib install Servo
          arduino-cli lib install --zip-path HMC5883L.zip
          arduino-cli lib install --zip-path NewPing.zip          
          sed -i '/recipe.output.tmp_file={build.project_name}.hex/d' "$HOME/.arduino15/packages/arduino/hardware/avr/1.8.3/platform.txt"
          sed -i '/recipe.output.save_file={build.project_name}.{build.variant}.hex/d' "$HOME/.arduino15/packages/arduino/hardware/avr/1.8.3/platform.txt"
          mkdir -p $HOME/Arduino/libraries
          ln -s $PWD $HOME/Arduino/libraries/.
          
      - name: Get the version
        id: version
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          echo ::set-output name=version::${GITHUB_REF/refs\/tags\//}   
  
      - name: Set VERSION variable
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && steps.version.outputs.version != ''
        run: |
          *sed -Ei "s/#define VERSION \".+\"/#define VERSION \"${{ steps.version.outputs.version }}\"/" includes/parameters.h          

      - name: Build wrapper & sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          export PATH=$PATH:$HOME/bin
          unzip -o build-wrapper-linux-x86.zip
          echo "build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir $PWD/build bash sonarcloud/build.sh"
          
          build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir $PWD/build arduino-cli compile --build-path $PWD/build -b arduino:avr:mega --verbose sniffer_cube  --clean
          
          echo "ls -l $PWD/build/sketch"
          ls -l $PWD/build/sketch
                    
          echo "-------- usando convert-compile-commands.py ------"
          echo "python convert-compile-commands.py $PWD/build/compile_commands.json"
          python convert-compile-commands.py $PWD/build/compile_commands.json
          cp cfamily-compilation-database/build-wrapper-dump.json build/
          echo "--------------------------------------------------"
          
          
          sonar-scanner   -Dsonar.organization=thaironeloureiro   -Dsonar.projectKey=thaironeloureiro_cubex   -Dsonar.sources=.   -Dsonar.cfamily.build-wrapper-output=bw-output   -Dsonar.host.url=https://sonarcloud.io

          
      
  
